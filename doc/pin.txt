*pin* A Harpoon-inspired buffer manager for IdeaVim users.

MIT License Copyright (c) 2025 Hernán Cervera.

Contents:

1. Introduction                                               |pin-introduction|
2. Configuration                                             |pin-configuration|
3. Highlight groups                                       |pin-highlight-groups|
4. Functions                                                     |pin-functions|

==============================================================================
                                                              *pin-introduction*
Introduction ~

Context: <https://github.com/hernancerm/pin.nvim/blob/main/README.md>.

To enable the plugin you need to call the |pin.setup()| function. To use the
defaults, call it without arguments:
>lua
  require("pin").setup()
<
After calling |pin.setup()| the Lua global `Pin` gets defined. This global
variable provides acces to everything that `require("pin")` does. This is
useful for setting key maps on functions which expect an arg, e.g.:
>lua
  vim.keymap.set("n", "<F1>", ":call v:lua.Pin.edit_by_index(1)<CR>")
<
                                                                   *pin.setup()*
                             `pin.setup`({config})
Module setup.
Parameters ~
{config} `(table?)` Merged with the default config (|pin.default_config|). The
former takes precedence on duplicate keys.

------------------------------------------------------------------------------
                                                                    *pin.config*
                                                            *pin.default_config*
                                                             *pin-configuration*
Configuration ~

The merged config (defaults with user overrides) is in `pin.config`. The
default config is in `pin.default_config`. Below is the default config:
>lua
  {
    auto_hide_tabline = true,
    set_default_keymaps = true,
    exclude = function(_) end,
    use_mini_bufremove = false,
    remove_with = "delete",
  }
<
                                                  *pin.config.auto_hide_tabline*
`(boolean)`
When true, when there are no pinned bufs, hide the tabline.

                                                *pin.config.set_default_keymaps*
`(boolean)`
When true, the default key maps, listed below, are set.

Default key maps:
>lua
  local o = { silent = true }
  local kset = vim.keymap.set
  kset("n",  "<Leader>p",  ":cal v:lua.Pin.toggle()<CR>", o)
  kset("n",  "<Leader>w",  ":cal v:lua.Pin.remove()<CR>", o)
  kset("n",  "<Up>",       ":cal v:lua.Pin.edit_left()<CR>", o)
  kset("n",  "<Down>",     ":cal v:lua.Pin.edit_right()<CR>", o)
  kset("n",  "<Left>",     ":cal v:lua.Pin.move_to_left()<CR>", o)
  kset("n",  "<Right>",    ":cal v:lua.Pin.move_to_right()<CR>", o)
  kset("n",  "<F1>",       ":cal v:lua.Pin.edit_by_index(1)<CR>", o)
  kset("n",  "<F2>",       ":cal v:lua.Pin.edit_by_index(2)<CR>", o)
  kset("n",  "<F3>",       ":cal v:lua.Pin.edit_by_index(3)<CR>", o)
  kset("n",  "<F4>",       ":cal v:lua.Pin.edit_by_index(4)<CR>", o)
<
                                                            *pin.config.exclude*
`(fun(bufnr:integer):boolean)`
When the function returns true, the buf (`bufnr`) is ignored. This means that
calling |pin.pin()| on it has no effect. Some bufs are excluded regardless of
this option: bufs without a name ([No Name]), Vim help files, detected plugin
bufs (e.g., nvimtree) and floating wins.

                                                 *pin.config.use_mini_bufremove*
`(boolean)`
You need to have installed <https://github.com/echasnovski/mini.bufremove> for
this option to work as `true`. When `true`, all buf deletions and wipeouts are
done using the `mini.bufremove` plugin, thus preserving window layouts.

                                                        *pin.config.remove_with*
`"delete"|"wipeout"`
Set how buf removal is done for both the function |pin.remove()| and the mouse
middle click input on a buf in the tabline.

------------------------------------------------------------------------------
                                                          *pin-highlight-groups*
Highlight groups ~

Only built-in highlight groups are used.

• Active buffer: |hl-TabLineSel|
• Tabline background: |hl-TabLineFill|

------------------------------------------------------------------------------
                                                                 *pin-functions*
Functions ~

                                                                     *pin.pin()*
                               `pin.pin`({bufnr})
Parameters ~
{bufnr} `(integer)`

                                                                   *pin.unpin()*
                              `pin.unpin`({bufnr})
Parameters ~
{bufnr} `(integer)`

                                                                  *pin.toggle()*
                             `pin.toggle`({bufnr})
Parameters ~
{bufnr} `(integer)`

                                                                  *pin.remove()*
                             `pin.remove`({bufnr})
Remove a buf either by deleting it or wiping it out. This function obeys the
config key |pin.config.remove_with|. Use this function to remove pinned bufs.
Parameters ~
{bufnr} `(integer)`

                                                           *pin.edit_by_index()*
                          `pin.edit_by_index`({index})
Parameters ~
{index} `(integer)` Index of a pinned buf in the list |pin.get_pinned_bufs()|.

                                                         *pin.get_pinned_bufs()*
                            `pin.get_pinned_bufs`()
Get all the pinned bufs. This is the actual list, not a copy.
Return ~
`(table)` List of buf handlers.

                                                         *pin.refresh_tabline()*
                         `pin.refresh_tabline`({force})
Set the option 'tabline'. The tabline is not drawn during a session
(|session-file|) load. To force draw send `force` as `true`.
Parameters ~
{force} `(boolean?)`

 vim:tw=78:ts=8:noet:ft=help:norl: