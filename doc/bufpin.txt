*bufpin* Manually track a list of bufs and visualize the list in the tabline.

MIT License Copyright (c) 2025 Hernán Cervera.

Contents:

1. Introduction                                            |bufpin-introduction|
2. Configuration                                          |bufpin-configuration|
3. Highlight groups                                    |bufpin-highlight-groups|
4. Functions                                                  |bufpin-functions|

==============================================================================
                                                           *bufpin-introduction*
Introduction ~

Context: <https://github.com/hernancerm/bufpin.nvim/blob/main/README.md>.

To enable the plugin you need to call the |bufpin.setup()| function. To use
the defaults, call it without arguments:
>lua
  require("bufpin").setup()
<
After calling |bufpin.setup()| the Lua global `Bufpin` gets defined. This
global variable provides acces to everything that `require("bufpin")` does.
This is useful for setting key maps on functions which expect an arg, e.g.:
>lua
  vim.keymap.set("n", "<F1>", ":call v:lua.Bufpin.edit_by_index(1)<CR>")
<
                                                                *bufpin.setup()*
                            `bufpin.setup`({config})
Module setup.
Parameters ~
{config} `(table?)` Merged with the default config (|bufpin.default_config|).
The former takes priority on duplicate keys.

------------------------------------------------------------------------------
                                                                 *bufpin.config*
                                                         *bufpin.default_config*
                                                          *bufpin-configuration*
Configuration ~

The merged config (defaults with user overrides) is in `bufpin.config`. The
default config is in `bufpin.default_config`. Below is the default config:
>lua
  {
    auto_hide_tabline = true,
    set_default_keymaps = true,
    exclude = function(_) end,
    use_mini_bufremove = false,
    icons_style = "monochrome",
    ghost_buf_enabled = true,
    remove_with = "delete"
  }
<
                                               *bufpin.config.auto_hide_tabline*
`(boolean)`
When true, when there are no pinned bufs, hide the tabline.

                                             *bufpin.config.set_default_keymaps*
`(boolean)`
When true, the default key maps, listed below, are set.

Default key maps:
>lua
  local kset = vim.keymap.set
  local opts = { silent = true }
  kset("n",  "<Leader>p",  ":cal v:lua.Bufpin.toggle()<CR>",          opts)
  kset("n",  "<Leader>w",  ":cal v:lua.Bufpin.remove()<CR>",          opts)
  kset("n",  "<Up>",       ":cal v:lua.Bufpin.edit_left()<CR>",       opts)
  kset("n",  "<Down>",     ":cal v:lua.Bufpin.edit_right()<CR>",      opts)
  kset("n",  "<Left>",     ":cal v:lua.Bufpin.move_to_left()<CR>",    opts)
  kset("n",  "<Right>",    ":cal v:lua.Bufpin.move_to_right()<CR>",   opts)
  kset("n",  "<F1>",       ":cal v:lua.Bufpin.edit_by_index(1)<CR>",  opts)
  kset("n",  "<F2>",       ":cal v:lua.Bufpin.edit_by_index(2)<CR>",  opts)
  kset("n",  "<F3>",       ":cal v:lua.Bufpin.edit_by_index(3)<CR>",  opts)
  kset("n",  "<F4>",       ":cal v:lua.Bufpin.edit_by_index(4)<CR>",  opts)
<
                                                         *bufpin.config.exclude*
`(fun(bufnr:integer):boolean)`
When the function returns true, the buf (`bufnr`) is ignored. This means that
calling |bufpin.pin()| on it has no effect. Some bufs are excluded regardless
of this option: bufs without a name ([No Name]), Vim help files, man pages,
detected plugin bufs (e.g., nvimtree) and floating wins.

                                              *bufpin.config.use_mini_bufremove*
`(boolean)`
You need to have installed <https://github.com/echasnovski/mini.bufremove> for
this option to work as `true`. When `true`, all buf deletions and wipeouts are
done using the `mini.bufremove` plugin, thus preserving window layouts.

                                                     *bufpin.config.icons_style*
`"color"|"monochrome"|"monochrome_selected"`
How the file type icons look. Currently there is a bug with "color".

                                               *bufpin.config.ghost_buf_enabled*
`(boolean)`
Whether to display the ghost buffer, i.e., the last visited non-pinned buf. If
any, it's displayed always as the last item in the tabline.

                                                     *bufpin.config.remove_with*
`"delete"|"wipeout"`
Set how buf removal is done for both the function |bufpin.remove()| and the
mouse middle click input on a buf in the tabline.

------------------------------------------------------------------------------
                                                       *bufpin-highlight-groups*
Highlight groups ~

• Active buffer: |hl-TabLineSel|
• Tabline background: |hl-TabLineFill|
• Active ghost buffer: `BufpinGhostTabLineSel`
• Inactive ghost buffer: `BufpinGhostTabLineFill`

------------------------------------------------------------------------------
                                                              *bufpin-functions*
Functions ~

                                                                  *bufpin.pin()*
                             `bufpin.pin`({bufnr})
Pin the current buf or the provided buf.
Parameters ~
{bufnr} `(integer?)`

                                                                *bufpin.unpin()*
                            `bufpin.unpin`({bufnr})
Unpin the current buf or the provided buf.
Parameters ~
{bufnr} `(integer?)`

                                                               *bufpin.toggle()*
                            `bufpin.toggle`({bufnr})
Toggle the pin state of the current buf or the provided buf.
Parameters ~
{bufnr} `(integer?)`

                                                               *bufpin.remove()*
                            `bufpin.remove`({bufnr})
Remove a buf either by deleting it or wiping it out. This function obeys the
config |bufpin.config.remove_with|. Use this function to remove pinned bufs.
When no bufnr is provided, the current buf is attempted to be removed.
Parameters ~
{bufnr} `(integer?)`

                                                         *bufpin.move_to_left()*
                         `bufpin.move_to_left`({bufnr})
Move a buffer one step to the left in the list of pinned buffers.
When no bufnr is provided, the current buf is attempted to be moved.
Parameters ~
{bufnr} `(integer?)`

                                                        *bufpin.move_to_right()*
                        `bufpin.move_to_right`({bufnr})
Move a buffer one step to the right in the list of pinned buffers.
When no bufnr is provided, the current buf is attempted to be moved.
Parameters ~
{bufnr} `(integer?)`

                                                        *bufpin.edit_by_index()*
                        `bufpin.edit_by_index`({index})
Parameters ~
{index} `(integer)` Index of a pinned buf in |bufpin.get_pinned_bufs()|.

                                                      *bufpin.get_pinned_bufs()*
                           `bufpin.get_pinned_bufs`()
Get all the pinned bufs. This is the actual list, not a copy.
Return ~
`(integer[])` Buf handlers.

                                                      *bufpin.refresh_tabline()*
                       `bufpin.refresh_tabline`({force})
Set the option 'tabline'. The tabline is not drawn during a session
(|session-file|) load. To force draw send `force` as `true`.
Parameters ~
{force} `(boolean?)`

 vim:tw=78:ts=8:noet:ft=help:norl: